{"remainingRequest":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/src/components/global/configbuilder/stratpicker.vue?vue&type=style&index=0&lang=css","dependencies":[{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/src/components/global/configbuilder/stratpicker.vue","mtime":1569604667000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/css-loader/index.js","mtime":1569708697000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1521907989000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/cache-loader/dist/cjs.js","mtime":1569708698000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/vue-loader/lib/index.js","mtime":1527860006000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.align .custom-select select {\n  padding: 0.4em 1.2em .3em .8em;\n}\n\n.label-like {\n  display: block;\n  font-size: 0.9em;\n  color: #777;\n}\n\n.align {\n  padding-left: 1em;\n}\n",{"version":3,"sources":["stratpicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"stratpicker.vue","sourceRoot":"src/components/global/configbuilder","sourcesContent":["<template lang='pug'>\n.grd\n  .grd-row\n    .grd-row-col-3-6.px1\n      h3 Strategy\n      div\n        label(for='strat').wrapper Strategy:\n        .custom-select.button\n          select(v-model='strategy')\n            option(v-for='strat in strategies') {{ strat.name }}\n      div\n        label(for='candleSize') Candle Size\n        .grd-row\n          .grd-row-col-3-6\n            input(v-model='rawCandleSize')\n          .grd-row-col-3-6.align\n            .custom-select.button\n              select(v-model='candleSizeUnit')\n                option minutes\n                option hours\n                option days\n      div\n        label(for='historySize') Warmup period (in {{ rawCandleSize }} {{ singularCandleSizeUnit }} candles):\n        input(v-model='historySize')\n        em.label-like (will use {{ humanizeDuration(candleSize * historySize * 1000 * 60) }} of data as history)\n    .grd-row-col-3-6.px1\n      div\n        h3 Parameters\n        p {{ strategy }} Parameters:\n        textarea.params(v-model='rawStratParams')\n        p.bg--red.p1(v-if='rawStratParamsError') {{ rawStratParamsError.message }}\n</template>\n\n<script>\n\nimport _ from 'lodash'\nimport { get } from '../../../tools/ajax'\n\nexport default {\n  data: () => {\n    return {\n      strategies: [],\n\n      candleSizeUnit: 'hours',\n      rawCandleSize: 1,\n\n      strategy: 'MACD',\n      historySize: 10,\n\n      rawStratParams: '',\n      rawStratParamsError: false,\n\n      emptyStrat: false,\n      stratParams: {}\n    };\n  },\n  created: function () {\n    get('strategies', (err, data) => {\n        this.strategies = data;\n\n        _.each(this.strategies, function(s) {\n          s.empty = s.params === '';\n        });\n\n        this.rawStratParams = _.find(this.strategies, { name: this.strategy }).params;\n        this.emptyStrat = _.find(this.strategies, { name: this.strategy }).empty;\n        this.emitConfig();\n    });\n  },\n  watch: {\n    strategy: function(strat) {\n      strat = _.find(this.strategies, { name: strat });\n      this.rawStratParams = strat.params;\n      this.emptyStrat = strat.empty;\n\n      this.emitConfig();\n    },\n    candleSize: function() { this.emitConfig() },\n    historySize: function() { this.emitConfig() },\n    rawStratParams: function() { this.emitConfig() }\n  },\n  computed: {\n    candleSize: function() {\n       if(this.candleSizeUnit === 'minutes')\n        return this.rawCandleSize;\n      else if(this.candleSizeUnit === 'hours')\n        return this.rawCandleSize * 60;\n      else if(this.candleSizeUnit === 'days')\n        return this.rawCandleSize * 60 * 24;\n    },\n    singularCandleSizeUnit: function() {\n      // hours -> hour\n      return this.candleSizeUnit.slice(0, -1);\n    },\n    config: function() {\n      let config = {\n        tradingAdvisor: {\n          enabled: true,\n          method: this.strategy,\n          candleSize: +this.candleSize,\n          historySize: +this.historySize\n        }\n      }\n\n      if(this.emptyStrat)\n        config[this.strategy] = {__empty: true}\n      else\n        config[this.strategy] = this.stratParams;\n\n      return config;\n    }\n  },\n  methods: {\n    humanizeDuration: (n) => window.humanizeDuration(n),\n    emitConfig: function() {\n      this.parseParams();\n      this.$emit('stratConfig', this.config);\n    },\n    parseParams: function() {\n      try {\n        this.stratParams = toml.parse(this.rawStratParams);\n        this.rawStratParamsError = false;\n      } catch(e) {\n        this.rawStratParamsError = e;\n        this.stratParams = {};\n      }\n    }\n  }\n}\n</script>\n<style>\n.align .custom-select select {\n  padding: 0.4em 1.2em .3em .8em;\n}\n\n.label-like {\n  display: block;\n  font-size: 0.9em;\n  color: #777;\n}\n\n.align {\n  padding-left: 1em;\n}\n</style>\n"]}]}