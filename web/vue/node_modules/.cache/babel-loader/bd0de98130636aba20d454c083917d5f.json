{"remainingRequest":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/thread-loader/dist/cjs.js!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/babel-loader/lib/index.js!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/src/components/gekko/singleGekko.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/src/components/gekko/singleGekko.vue","mtime":1569604667000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/cache-loader/dist/cjs.js","mtime":1569708698000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/thread-loader/dist/cjs.js","mtime":1569708698000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/vue-loader/lib/index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.promise\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from 'vue';\nimport _ from 'lodash';\nimport { post } from '../../tools/ajax';\nimport spinner from '../global/blockSpinner.vue';\nimport chart from '../backtester/result/chartWrapper.vue';\nimport roundtrips from '../backtester/result/roundtripTable.vue';\nimport paperTradeSummary from '../global/paperTradeSummary.vue'; // global moment\n\nexport default {\n  created: function created() {\n    if (!this.isLoading) this.getCandles();\n  },\n  components: {\n    spinner: spinner,\n    chart: chart,\n    paperTradeSummary: paperTradeSummary,\n    roundtrips: roundtrips\n  },\n  data: function data() {\n    return {\n      candleFetch: 'idle',\n      candles: false\n    };\n  },\n  computed: {\n    id: function id() {\n      return this.$route.params.id;\n    },\n    gekkos: function gekkos() {\n      return this.$store.state.gekkos;\n    },\n    archivedGekkos: function archivedGekkos() {\n      return this.$store.state.archivedGekkos;\n    },\n    data: function data() {\n      if (!this.gekkos) return false;\n      if (_.has(this.gekkos, this.id)) return this.gekkos[this.id];\n      if (_.has(this.archivedGekkos, this.id)) return this.archivedGekkos[this.id];\n      return false;\n    },\n    config: function config() {\n      return _.get(this, 'data.config');\n    },\n    latestEvents: function latestEvents() {\n      return _.get(this, 'data.events.latest');\n    },\n    initialEvents: function initialEvents() {\n      return _.get(this, 'data.events.initial');\n    },\n    trades: function trades() {\n      return _.get(this, 'data.events.tradeCompleted') || [];\n    },\n    roundtrips: function roundtrips() {\n      return _.get(this, 'data.events.roundtrip') || [];\n    },\n    isLive: function isLive() {\n      return _.has(this.gekkos, this.id);\n    },\n    type: function type() {\n      return this.data.logType;\n    },\n    isStratrunner: function isStratrunner() {\n      return this.type !== 'watcher';\n    },\n    isArchived: function isArchived() {\n      return this.data.stopped;\n    },\n    warmupRemaining: function warmupRemaining() {\n      if (!this.isStratrunner) {\n        return false;\n      }\n\n      if (this.isArchived) {\n        return false;\n      }\n\n      if (this.initialEvents.stratWarmupCompleted) {\n        return false;\n      }\n\n      if (!this.initialEvents.candle) {\n        return false;\n      }\n\n      var historySize = _.get(this.config, 'tradingAdvisor.historySize');\n\n      if (!historySize) {\n        return false;\n      }\n\n      var warmupTime = _.get(this.config, 'tradingAdvisor.candleSize') * historySize;\n      return humanizeDuration(moment(this.initialEvents.candle.start).add(warmupTime, 'm').diff(moment()), {\n        largest: 2\n      });\n    },\n    chartData: function chartData() {\n      return {\n        candles: this.candles,\n        trades: this.trades\n      };\n    },\n    report: function report() {\n      return _.get(this.latestEvents, 'performanceReport');\n    },\n    stratName: function stratName() {\n      if (this.data) return this.data.config.tradingAdvisor.method;\n    },\n    stratParams: function stratParams() {\n      if (!this.data) return 'Loading...';\n      var stratParams = Vue.util.extend({}, this.data.config[this.stratName]);\n      delete stratParams.__empty;\n      if (_.isEmpty(stratParams)) return 'No parameters';\n      return JSON.stringify(stratParams, null, 4);\n    },\n    isLoading: function isLoading() {\n      if (!this.data) return true;\n      if (!_.get(this.data, 'events.initial.candle')) return true;\n      if (!_.get(this.data, 'events.latest.candle')) return true;\n      return false;\n    },\n    watcher: function watcher() {\n      var _this = this;\n\n      if (!this.isStratrunner) {\n        return false;\n      }\n\n      var watch = Vue.util.extend({}, this.data.config.watch);\n      return _.find(this.gekkos, function (g) {\n        if (g.id === _this.id) return false;\n        return _.isEqual(watch, g.config.watch);\n      });\n    },\n    hasLeechers: function hasLeechers() {\n      var _this2 = this;\n\n      if (this.isStratrunner) {\n        return false;\n      }\n\n      var watch = Vue.util.extend({}, this.data.config.watch);\n      return _.find(this.gekkos, function (g) {\n        if (g.id === _this2.id) return false;\n        return _.isEqual(watch, g.config.watch);\n      });\n    }\n  },\n  watch: {\n    'data.events.latest.candle.start': function dataEventsLatestCandleStart() {\n      setTimeout(this.getCandles, _.random(100, 2000));\n    }\n  },\n  methods: {\n    round: function round(n) {\n      return (+n).toFixed(5);\n    },\n    humanizeDuration: function humanizeDuration(n, x) {\n      return window.humanizeDuration(n, x);\n    },\n    moment: function (_moment) {\n      function moment(_x) {\n        return _moment.apply(this, arguments);\n      }\n\n      moment.toString = function () {\n        return _moment.toString();\n      };\n\n      return moment;\n    }(function (mom) {\n      return moment.utc(mom);\n    }),\n    fmt: function fmt(mom) {\n      return moment.utc(mom).format('YYYY-MM-DD HH:mm');\n    },\n    getCandles: function getCandles() {\n      var _this3 = this;\n\n      if (this.isLoading) {\n        return;\n      }\n\n      if (this.candleFetch === 'fetching') {\n        return;\n      }\n\n      this.candleFetch = 'fetching';\n      var to = this.data.events.latest.candle.start;\n      var from = this.data.events.initial.candle.start;\n      var candleSize = 1;\n\n      if (this.type !== 'watcher') {\n        candleSize = this.data.config.tradingAdvisor.candleSize;\n      }\n\n      var config = {\n        watch: this.data.config.watch,\n        daterange: {\n          to: to,\n          from: from\n        },\n        candleSize: candleSize\n      }; // We timeout because of 2 reasons:\n      // - In case we get a batch of candles we only fetch once\n      // - This way we give the db (mostly sqlite) some time to write\n      //   the result before we query it.\n\n      setTimeout(function () {\n        post('getCandles', config, function (err, res) {\n          _this3.candleFetch = 'fetched';\n          if (!res || res.error || !_.isArray(res)) return console.log(res);\n          _this3.candles = res.map(function (c) {\n            c.start = moment.unix(c.start).utc().format();\n            return c;\n          });\n        });\n      }, _.random(150, 2500));\n    },\n    stopGekko: function stopGekko() {\n      if (this.hasLeechers) {\n        return alert('This Gekko is fetching market data for multiple stratrunners, stop these first.');\n      }\n\n      if (!confirm('Are you sure you want to stop this Gekko?')) {\n        return;\n      }\n\n      post('stopGekko', {\n        id: this.data.id\n      }, function (err, res) {\n        console.log('stopped gekko');\n      });\n    },\n    deleteGekko: function deleteGekko() {\n      var _this4 = this;\n\n      if (!this.isArchived) {\n        return alert('This Gekko is still running, stop it first!');\n      }\n\n      if (!confirm('Are you sure you want to delete this Gekko?')) {\n        return;\n      }\n\n      post('deleteGekko', {\n        id: this.data.id\n      }, function (err, res) {\n        _this4.$router.push({\n          path: \"/live-gekkos/\"\n        });\n      });\n    }\n  }\n};",{"version":3,"sources":["singleGekko.vue"],"names":[],"mappings":"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","sourcesContent":["<template lang='pug'>\n  div.my2\n    .contain(v-if='!data')\n      h1 Unknown Gekko instance\n      p Gekko doesn't know what gekko this is...\n    div(v-if='data')\n      h2.contain Gekko {{ type }}\n      div(v-if='isArchived', class='contain brdr--mid-gray p1 bg--orange')\n        | This is an archived Gekko, it is currently not running anymore.\n      div(v-if='data.errorMessage', class='contain brdr--mid-gray p1 bg--orange')\n        | This is Gekko crashed with the following error: {{ data.errorMessage }}\n      .grd.contain\n        .grd-row\n          .grd-row-col-3-6\n            h3 Market\n            .grd-row\n              .grd-row-col-3-6 Exchange\n              .grd-row-col-3-6 {{ config.watch.exchange }}\n            .grd-row\n              .grd-row-col-3-6 Currency\n              .grd-row-col-3-6 {{ config.watch.currency }}\n            .grd-row\n              .grd-row-col-3-6 Asset\n              .grd-row-col-3-6 {{ config.watch.asset }}\n            .grd-row\n              .grd-row-col-3-6 Type\n              .grd-row-col-3-6 {{ type }}\n          .grd-row-col-3-6\n            h3 Runtime\n            spinner(v-if='isLoading')\n            template(v-if='!isLoading')\n              .grd-row(v-if='initialEvents.candle')\n                .grd-row-col-2-6 Watching since\n                .grd-row-col-4-6 {{ fmt(initialEvents.candle.start) }}\n              .grd-row(v-if='latestEvents.candle')\n                .grd-row-col-2-6 Received data until\n                .grd-row-col-4-6 {{ fmt(latestEvents.candle.start) }}\n              .grd-row(v-if='latestEvents.candle')\n                .grd-row-col-2-6 Data spanning\n                .grd-row-col-4-6 {{ humanizeDuration(moment(latestEvents.candle.start).diff(moment(initialEvents.candle.start))) }}\n              template(v-if='isStratrunner')\n                .grd-row\n                  .grd-row-col-2-6 Amount of trades\n                  .grd-row-col-4-6 {{ trades.length }}\n                .grd-row\n                  .grd-row-col-2-6 Candle size\n                  .grd-row-col-4-6 {{ config.tradingAdvisor.candleSize }}\n                .grd-row\n                  .grd-row-col-2-6 History size\n                  .grd-row-col-4-6 {{ config.tradingAdvisor.historySize }}\n        div(v-if='warmupRemaining', class='contain brdr--mid-gray p1 bg--orange')\n          | This stratrunner is still warming up for the next \n          i {{ warmupRemaining.replace(',', ' and ') }}\n          | , it will not trade until it is warmed up.\n        .grd-row(v-if='isStratrunner')\n          .grd-row-col-3-6\n            h3 Strategy\n            .grd-row\n              .grd-row-col-3-6 Name\n              .grd-row-col-3-6\n                strong {{ stratName }}\n            | Parameters\n            pre {{ stratParams }}\n          .grd-row-col-3-6\n            h3 Profit report\n            template(v-if='!report')\n              p\n                em(v-if='isArchived') This Gekko never executed a trade..\n                em(v-if='!isArchived') Waiting for at least one trade..\n            template(v-if='report')\n              .grd-row\n                .grd-row-col-3-6 Start balance\n                .grd-row-col-3-6 {{ round(report.startBalance) }}\n              .grd-row\n                .grd-row-col-3-6 Current balance\n                .grd-row-col-3-6 {{ round(report.balance) }}\n              .grd-row\n                .grd-row-col-3-6 Market\n                .grd-row-col-3-6 {{round(report.market / 100 * report.startPrice)}} {{ config.watch.currency }} ({{ round(report.market) }} %)\n              .grd-row\n                .grd-row-col-3-6 Profit\n                .grd-row-col-3-6 {{ round(report.profit) }} {{ config.watch.currency }} ({{ round(report.relativeProfit) }} %)\n              .grd-row\n                .grd-row-col-3-6 Alpha\n                .grd-row-col-3-6 {{ round(report.alpha) }} {{ config.watch.currency }}\n        p(v-if='isStratrunner && !watcher && !isArchived') WARNING: stale gekko, not attached to a watcher, please report \n          a(href='https://github.com/askmike/gekko/issues') here\n          | .\n        p(v-if='!isArchived')\n          a(v-on:click='stopGekko', class='w100--s my1 btn--red') Stop Gekko\n        p(v-if='isArchived')\n          a(v-on:click='deleteGekko', class='w100--s my1 btn--red') Delete Gekko\n        p(v-if='isStratrunner && watcher && !isArchived')\n          em This gekko gets market data from \n            router-link(:to='\"/live-gekkos/\" + watcher.id') this market watcher\n          | .\n      template(v-if='!isLoading')\n        h3.contain Market graph\n        spinner(v-if='candleFetch === \"fetching\"')\n        template(v-if='candleFetch === \"fetched\"')\n          chart(:data='chartData', :height='300')\n        roundtrips(v-if='isStratrunner', :roundtrips='roundtrips')\n</template>\n\n<script>\n\nimport Vue from 'vue'\nimport _ from 'lodash'\n\nimport { post } from '../../tools/ajax'\nimport spinner from '../global/blockSpinner.vue'\nimport chart from '../backtester/result/chartWrapper.vue'\nimport roundtrips from '../backtester/result/roundtripTable.vue'\nimport paperTradeSummary from '../global/paperTradeSummary.vue'\n// global moment\n\nexport default {\n  created: function() {\n    if(!this.isLoading)\n      this.getCandles();\n  },\n  components: {\n    spinner,\n    chart,\n    paperTradeSummary,\n    roundtrips\n  },\n  data: () => {\n    return {\n      candleFetch: 'idle',\n      candles: false\n    }\n  },\n  computed: {\n    id: function() {\n      return this.$route.params.id;\n    },\n    gekkos: function() {\n      return this.$store.state.gekkos;\n    },\n    archivedGekkos: function() {\n      return this.$store.state.archivedGekkos;\n    },\n    data: function() {\n      if(!this.gekkos)\n        return false;\n      if(_.has(this.gekkos, this.id))\n        return this.gekkos[this.id];\n      if(_.has(this.archivedGekkos, this.id))\n        return this.archivedGekkos[this.id];\n\n      return false;\n    },\n    config: function() {\n      return _.get(this, 'data.config');\n    },\n    latestEvents: function() {\n      return _.get(this, 'data.events.latest');\n    },\n    initialEvents: function() {\n      return _.get(this, 'data.events.initial');\n    },\n    trades: function() {\n      return _.get(this, 'data.events.tradeCompleted') || [];\n    },\n    roundtrips: function() {\n      return _.get(this, 'data.events.roundtrip') || [];\n    },\n    isLive: function() {\n      return _.has(this.gekkos, this.id);\n    },\n    type: function() {\n      return this.data.logType;\n    },\n    isStratrunner: function() {\n      return this.type !== 'watcher';\n    },\n    isArchived: function() {\n      return this.data.stopped;\n    },\n    warmupRemaining: function() {\n      if(!this.isStratrunner) {\n        return false;\n      }\n\n      if(this.isArchived) {\n        return false;\n      }\n\n      if(this.initialEvents.stratWarmupCompleted) {\n        return false;\n      }\n\n      if(!this.initialEvents.candle) {\n        return false;\n      }\n\n      const historySize = _.get(this.config, 'tradingAdvisor.historySize');\n\n      if(!historySize) {\n        return false;\n      }\n\n      const warmupTime = _.get(this.config, 'tradingAdvisor.candleSize') * historySize;\n\n      return humanizeDuration(\n        moment(this.initialEvents.candle.start).add(warmupTime, 'm').diff(moment()),\n        { largest: 2 }\n      );\n    },\n    chartData: function() {\n      return {\n        candles: this.candles,\n        trades: this.trades\n      }\n    },\n    report: function() {\n      return _.get(this.latestEvents, 'performanceReport');\n    },\n    stratName: function() {\n      if(this.data)\n        return this.data.config.tradingAdvisor.method;\n    },\n    stratParams: function() {\n      if(!this.data)\n        return 'Loading...';\n\n      let stratParams = Vue.util.extend({}, this.data.config[this.stratName]);\n      delete stratParams.__empty;\n\n      if(_.isEmpty(stratParams))\n        return 'No parameters'\n\n      return JSON.stringify(stratParams, null, 4);\n    },\n    isLoading: function() {\n      if(!this.data)\n        return true;\n      if(!_.get(this.data, 'events.initial.candle'))\n        return true;\n      if(!_.get(this.data, 'events.latest.candle'))\n        return true;\n\n      return false;\n    },\n    watcher: function() {\n      if(!this.isStratrunner) {\n        return false;\n      }\n\n      let watch = Vue.util.extend({}, this.data.config.watch);\n      return _.find(this.gekkos, g => {\n        if(g.id === this.id)\n          return false;\n\n        return _.isEqual(watch, g.config.watch);\n      });\n    },\n    hasLeechers: function() {\n      if(this.isStratrunner) {\n        return false;\n      }\n\n      let watch = Vue.util.extend({}, this.data.config.watch);\n\n      return _.find(this.gekkos, g => {\n        if(g.id === this.id)\n          return false;\n\n        return _.isEqual(watch, g.config.watch);\n      });\n    }\n  },\n  watch: {\n    'data.events.latest.candle.start': function() {\n      setTimeout(this.getCandles, _.random(100, 2000));\n    }\n  },\n  methods: {\n    round: n => (+n).toFixed(5),\n    humanizeDuration: (n, x) => window.humanizeDuration(n, x),\n    moment: mom => moment.utc(mom),\n    fmt: mom => moment.utc(mom).format('YYYY-MM-DD HH:mm'),\n    getCandles: function() {\n      if(this.isLoading) {\n        return;\n      }\n\n      if(this.candleFetch === 'fetching') {\n        return;\n      }\n\n      this.candleFetch = 'fetching';\n\n      let to = this.data.events.latest.candle.start;\n      let from = this.data.events.initial.candle.start;\n      let candleSize = 1;\n\n      if(this.type !== 'watcher') {\n        candleSize = this.data.config.tradingAdvisor.candleSize;\n      }\n\n      let config = {\n        watch: this.data.config.watch,\n        daterange: {\n          to, from\n        },\n        candleSize\n      };\n\n      // We timeout because of 2 reasons:\n      // - In case we get a batch of candles we only fetch once\n      // - This way we give the db (mostly sqlite) some time to write\n      //   the result before we query it.\n      setTimeout(() => {\n        post('getCandles', config, (err, res) => {\n          this.candleFetch = 'fetched';\n          if(!res || res.error || !_.isArray(res))\n            return console.log(res);\n\n          this.candles = res.map(c => {\n            c.start = moment.unix(c.start).utc().format();\n            return c;\n          });\n        })\n      }, _.random(150, 2500));\n    },\n    stopGekko: function() {\n      if(this.hasLeechers) {\n        return alert('This Gekko is fetching market data for multiple stratrunners, stop these first.');\n      }\n\n      if(!confirm('Are you sure you want to stop this Gekko?')) {\n        return;\n      }\n\n      post('stopGekko', { id: this.data.id }, (err, res) => {\n        console.log('stopped gekko');\n      });\n    },\n    deleteGekko: function() {\n      if(!this.isArchived) {\n        return alert('This Gekko is still running, stop it first!');\n      }\n\n      if(!confirm('Are you sure you want to delete this Gekko?')) {\n        return;\n      }\n\n      post('deleteGekko', { id: this.data.id }, (err, res) => {\n        this.$router.push({\n          path: `/live-gekkos/`\n        });\n      });\n    }\n  }\n}\n</script>\n\n<style>\n</style>\n"],"sourceRoot":"src/components/gekko"}]}