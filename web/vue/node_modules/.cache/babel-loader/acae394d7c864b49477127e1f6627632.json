{"remainingRequest":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/thread-loader/dist/cjs.js!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/babel-loader/lib/index.js!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/src/components/backtester/backtestConfigBuilder.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/src/components/backtester/backtestConfigBuilder.vue","mtime":1569604667000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/cache-loader/dist/cjs.js","mtime":1569708698000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/thread-loader/dist/cjs.js","mtime":1569708698000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/vue-loader/lib/index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.assign\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport datasetPicker from '../global/configbuilder/datasetpicker.vue';\nimport stratPicker from '../global/configbuilder/stratpicker.vue';\nimport paperTrader from '../global/configbuilder/papertrader.vue';\nimport _ from 'lodash';\nimport { get } from '../../tools/ajax';\nexport default {\n  created: function created() {\n    var _this = this;\n\n    get('configPart/performanceAnalyzer', function (error, response) {\n      _this.performanceAnalyzer = toml.parse(response.part);\n      _this.performanceAnalyzer.enabled = true;\n    });\n  },\n  data: function data() {\n    return {\n      dataset: {},\n      strat: {},\n      paperTrader: {},\n      performanceAnalyzer: {}\n    };\n  },\n  components: {\n    stratPicker: stratPicker,\n    datasetPicker: datasetPicker,\n    paperTrader: paperTrader\n  },\n  computed: {\n    market: function market() {\n      if (!this.dataset.exchange) return {};\n      return {\n        exchange: this.dataset.exchange,\n        currency: this.dataset.currency,\n        asset: this.dataset.asset\n      };\n    },\n    range: function range() {\n      if (!this.dataset.exchange) return {};\n      return {\n        from: this.dataset.from,\n        to: this.dataset.to\n      };\n    },\n    config: function config() {\n      var config = {};\n      Object.assign(config, {\n        watch: this.market\n      }, {\n        paperTrader: this.paperTrader\n      }, this.strat, {\n        backtest: {\n          daterange: this.range\n        },\n        backtestResultExporter: {\n          enabled: true,\n          writeToDisk: false,\n          data: {\n            stratUpdates: false,\n            roundtrips: true,\n            stratCandles: true,\n            stratCandleProps: ['open'],\n            trades: true\n          }\n        }\n      }, {\n        performanceAnalyzer: this.performanceAnalyzer\n      });\n      config.valid = this.validConfig(config);\n      config.backtestResultExporter.enabled = true;\n      return config;\n    }\n  },\n  methods: {\n    validConfig: function validConfig(config) {\n      if (!config.backtest) return false;\n      if (!config.backtest.daterange) return false;\n      if (_.isEmpty(config.backtest.daterange)) return false;\n      if (!config.watch) return false;\n      if (!config.tradingAdvisor) return false;\n      var strat = config.tradingAdvisor.method;\n      if (_.isEmpty(config[strat])) return false;\n\n      if (config.tradingAdvisor) {\n        if (_.isNaN(config.tradingAdvisor.candleSize)) return false;else if (config.tradingAdvisor.candleSize == 0) return false;\n      }\n\n      return true;\n    },\n    updateDataset: function updateDataset(set) {\n      this.dataset = set;\n      this.$emit('config', this.config);\n    },\n    updateStrat: function updateStrat(sc) {\n      this.strat = sc;\n      this.$emit('config', this.config);\n    },\n    updatePaperTrader: function updatePaperTrader(pt) {\n      this.paperTrader = pt;\n      this.paperTrader.enabled = true;\n      this.$emit('config', this.config);\n    }\n  }\n};",{"version":3,"sources":["backtestConfigBuilder.vue"],"names":[],"mappings":"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","sourcesContent":["<template lang='pug'>\n  div\n    dataset-picker.my2(v-on:dataset='updateDataset').contain\n    .hr\n    strat-picker.my2(v-on:stratConfig='updateStrat').contain\n    .hr\n    paper-trader(v-on:settings='updatePaperTrader').contain\n    .hr\n</template>\n\n<script>\n\nimport datasetPicker from '../global/configbuilder/datasetpicker.vue'\nimport stratPicker from '../global/configbuilder/stratpicker.vue'\nimport paperTrader from '../global/configbuilder/papertrader.vue'\nimport _ from 'lodash'\nimport { get } from '../../tools/ajax'\n\nexport default {\n  created: function() {\n    get('configPart/performanceAnalyzer', (error, response) => {\n      this.performanceAnalyzer = toml.parse(response.part);\n      this.performanceAnalyzer.enabled = true;\n    });\n  },\n  data: () => {\n    return {\n      dataset: {},\n      strat: {},\n      paperTrader: {},\n      performanceAnalyzer: {}\n    }\n  },\n  components: {\n    stratPicker,\n    datasetPicker,\n    paperTrader\n  },\n  computed: {\n    market: function() {\n      if(!this.dataset.exchange)\n        return {};\n\n      return {\n        exchange: this.dataset.exchange,\n        currency: this.dataset.currency,\n        asset: this.dataset.asset\n      }\n    },\n    range: function() {\n      if(!this.dataset.exchange)\n        return {};\n\n      return {\n        from: this.dataset.from,\n        to: this.dataset.to\n      }\n    },\n    config: function() {\n      let config = {};\n      Object.assign(\n        config,\n        { watch: this.market },\n        { paperTrader: this.paperTrader },\n        this.strat,\n        {\n          backtest: {\n            daterange: this.range\n          },\n          backtestResultExporter: {\n            enabled: true,\n            writeToDisk: false,\n            data: {\n              stratUpdates: false,\n              roundtrips: true,\n              stratCandles: true,\n              stratCandleProps: ['open'],\n              trades: true\n            }\n          }\n        },\n        { performanceAnalyzer: this.performanceAnalyzer },\n      );\n\n      config.valid = this.validConfig(config);\n      config.backtestResultExporter.enabled = true;\n\n      return config;\n    }\n  },\n  methods: {\n    validConfig: function(config) {\n      if(!config.backtest)\n        return false;\n\n      if(!config.backtest.daterange)\n        return false;\n\n      if(_.isEmpty(config.backtest.daterange))\n        return false;\n\n      if(!config.watch)\n        return false;\n\n      if(!config.tradingAdvisor)\n        return false;\n\n      let strat = config.tradingAdvisor.method;\n      if(_.isEmpty(config[ strat ]))\n        return false;\n\n      if(config.tradingAdvisor) {\n        if(_.isNaN(config.tradingAdvisor.candleSize))\n          return false;\n        else if(config.tradingAdvisor.candleSize == 0)\n          return false;\n      }\n\n      return true;\n    },\n    updateDataset: function(set) {\n      this.dataset = set;\n      this.$emit('config', this.config);\n    },\n    updateStrat: function(sc) {\n      this.strat = sc;\n      this.$emit('config', this.config);\n    },\n    updatePaperTrader: function(pt) {\n      this.paperTrader = pt;\n      this.paperTrader.enabled = true;\n      this.$emit('config', this.config);\n    },\n  }\n}\n</script>\n\n<style>\n</style>\n"],"sourceRoot":"src/components/backtester"}]}