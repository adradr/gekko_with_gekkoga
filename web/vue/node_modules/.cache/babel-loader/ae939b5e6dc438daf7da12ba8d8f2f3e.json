{"remainingRequest":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/thread-loader/dist/cjs.js!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/babel-loader/lib/index.js!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/src/components/global/configbuilder/stratpicker.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/src/components/global/configbuilder/stratpicker.vue","mtime":1569604667000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/cache-loader/dist/cjs.js","mtime":1569708698000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/thread-loader/dist/cjs.js","mtime":1569708698000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/vue-loader/lib/index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport _ from 'lodash';\nimport { get } from '../../../tools/ajax';\nexport default {\n  data: function data() {\n    return {\n      strategies: [],\n      candleSizeUnit: 'hours',\n      rawCandleSize: 1,\n      strategy: 'MACD',\n      historySize: 10,\n      rawStratParams: '',\n      rawStratParamsError: false,\n      emptyStrat: false,\n      stratParams: {}\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    get('strategies', function (err, data) {\n      _this.strategies = data;\n\n      _.each(_this.strategies, function (s) {\n        s.empty = s.params === '';\n      });\n\n      _this.rawStratParams = _.find(_this.strategies, {\n        name: _this.strategy\n      }).params;\n      _this.emptyStrat = _.find(_this.strategies, {\n        name: _this.strategy\n      }).empty;\n\n      _this.emitConfig();\n    });\n  },\n  watch: {\n    strategy: function strategy(strat) {\n      strat = _.find(this.strategies, {\n        name: strat\n      });\n      this.rawStratParams = strat.params;\n      this.emptyStrat = strat.empty;\n      this.emitConfig();\n    },\n    candleSize: function candleSize() {\n      this.emitConfig();\n    },\n    historySize: function historySize() {\n      this.emitConfig();\n    },\n    rawStratParams: function rawStratParams() {\n      this.emitConfig();\n    }\n  },\n  computed: {\n    candleSize: function candleSize() {\n      if (this.candleSizeUnit === 'minutes') return this.rawCandleSize;else if (this.candleSizeUnit === 'hours') return this.rawCandleSize * 60;else if (this.candleSizeUnit === 'days') return this.rawCandleSize * 60 * 24;\n    },\n    singularCandleSizeUnit: function singularCandleSizeUnit() {\n      // hours -> hour\n      return this.candleSizeUnit.slice(0, -1);\n    },\n    config: function config() {\n      var config = {\n        tradingAdvisor: {\n          enabled: true,\n          method: this.strategy,\n          candleSize: +this.candleSize,\n          historySize: +this.historySize\n        }\n      };\n      if (this.emptyStrat) config[this.strategy] = {\n        __empty: true\n      };else config[this.strategy] = this.stratParams;\n      return config;\n    }\n  },\n  methods: {\n    humanizeDuration: function humanizeDuration(n) {\n      return window.humanizeDuration(n);\n    },\n    emitConfig: function emitConfig() {\n      this.parseParams();\n      this.$emit('stratConfig', this.config);\n    },\n    parseParams: function parseParams() {\n      try {\n        this.stratParams = toml.parse(this.rawStratParams);\n        this.rawStratParamsError = false;\n      } catch (e) {\n        this.rawStratParamsError = e;\n        this.stratParams = {};\n      }\n    }\n  }\n};",{"version":3,"sources":["stratpicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,OAAA,CAAA,MAAA,QAAA;AACA,SAAA,GAAA,QAAA,qBAAA;AAEA,eAAA;AACA,QAAA,gBAAA;AACA,WAAA;AACA,kBAAA,EADA;AAGA,sBAAA,OAHA;AAIA,qBAAA,CAJA;AAMA,gBAAA,MANA;AAOA,mBAAA,EAPA;AASA,sBAAA,EATA;AAUA,2BAAA,KAVA;AAYA,kBAAA,KAZA;AAaA,mBAAA;AAbA,KAAA;AAeA,GAjBA;AAkBA,WAAA,mBAAA;AAAA;;AACA,QAAA,YAAA,EAAA,UAAA,GAAA,EAAA,IAAA,EAAA;AACA,YAAA,UAAA,GAAA,IAAA;;AAEA,QAAA,IAAA,CAAA,MAAA,UAAA,EAAA,UAAA,CAAA,EAAA;AACA,UAAA,KAAA,GAAA,EAAA,MAAA,KAAA,EAAA;AACA,OAFA;;AAIA,YAAA,cAAA,GAAA,EAAA,IAAA,CAAA,MAAA,UAAA,EAAA;AAAA,cAAA,MAAA;AAAA,OAAA,EAAA,MAAA;AACA,YAAA,UAAA,GAAA,EAAA,IAAA,CAAA,MAAA,UAAA,EAAA;AAAA,cAAA,MAAA;AAAA,OAAA,EAAA,KAAA;;AACA,YAAA,UAAA;AACA,KAVA;AAWA,GA9BA;AA+BA,SAAA;AACA,cAAA,kBAAA,KAAA,EAAA;AACA,cAAA,EAAA,IAAA,CAAA,KAAA,UAAA,EAAA;AAAA,cAAA;AAAA,OAAA,CAAA;AACA,WAAA,cAAA,GAAA,MAAA,MAAA;AACA,WAAA,UAAA,GAAA,MAAA,KAAA;AAEA,WAAA,UAAA;AACA,KAPA;AAQA,gBAAA,sBAAA;AAAA,WAAA,UAAA;AAAA,KARA;AASA,iBAAA,uBAAA;AAAA,WAAA,UAAA;AAAA,KATA;AAUA,oBAAA,0BAAA;AAAA,WAAA,UAAA;AAAA;AAVA,GA/BA;AA2CA,YAAA;AACA,gBAAA,sBAAA;AACA,UAAA,KAAA,cAAA,KAAA,SAAA,EACA,OAAA,KAAA,aAAA,CADA,KAEA,IAAA,KAAA,cAAA,KAAA,OAAA,EACA,OAAA,KAAA,aAAA,GAAA,EAAA,CADA,KAEA,IAAA,KAAA,cAAA,KAAA,MAAA,EACA,OAAA,KAAA,aAAA,GAAA,EAAA,GAAA,EAAA;AACA,KARA;AASA,4BAAA,kCAAA;AACA;AACA,aAAA,KAAA,cAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,KAZA;AAaA,YAAA,kBAAA;AACA,UAAA,SAAA;AACA,wBAAA;AACA,mBAAA,IADA;AAEA,kBAAA,KAAA,QAFA;AAGA,sBAAA,CAAA,KAAA,UAHA;AAIA,uBAAA,CAAA,KAAA;AAJA;AADA,OAAA;AASA,UAAA,KAAA,UAAA,EACA,OAAA,KAAA,QAAA,IAAA;AAAA,iBAAA;AAAA,OAAA,CADA,KAGA,OAAA,KAAA,QAAA,IAAA,KAAA,WAAA;AAEA,aAAA,MAAA;AACA;AA7BA,GA3CA;AA0EA,WAAA;AACA,sBAAA,0BAAA,CAAA;AAAA,aAAA,OAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,KADA;AAEA,gBAAA,sBAAA;AACA,WAAA,WAAA;AACA,WAAA,KAAA,CAAA,aAAA,EAAA,KAAA,MAAA;AACA,KALA;AAMA,iBAAA,uBAAA;AACA,UAAA;AACA,aAAA,WAAA,GAAA,KAAA,KAAA,CAAA,KAAA,cAAA,CAAA;AACA,aAAA,mBAAA,GAAA,KAAA;AACA,OAHA,CAGA,OAAA,CAAA,EAAA;AACA,aAAA,mBAAA,GAAA,CAAA;AACA,aAAA,WAAA,GAAA,EAAA;AACA;AACA;AAdA;AA1EA,CAAA","sourcesContent":["<template lang='pug'>\n.grd\n  .grd-row\n    .grd-row-col-3-6.px1\n      h3 Strategy\n      div\n        label(for='strat').wrapper Strategy:\n        .custom-select.button\n          select(v-model='strategy')\n            option(v-for='strat in strategies') {{ strat.name }}\n      div\n        label(for='candleSize') Candle Size\n        .grd-row\n          .grd-row-col-3-6\n            input(v-model='rawCandleSize')\n          .grd-row-col-3-6.align\n            .custom-select.button\n              select(v-model='candleSizeUnit')\n                option minutes\n                option hours\n                option days\n      div\n        label(for='historySize') Warmup period (in {{ rawCandleSize }} {{ singularCandleSizeUnit }} candles):\n        input(v-model='historySize')\n        em.label-like (will use {{ humanizeDuration(candleSize * historySize * 1000 * 60) }} of data as history)\n    .grd-row-col-3-6.px1\n      div\n        h3 Parameters\n        p {{ strategy }} Parameters:\n        textarea.params(v-model='rawStratParams')\n        p.bg--red.p1(v-if='rawStratParamsError') {{ rawStratParamsError.message }}\n</template>\n\n<script>\n\nimport _ from 'lodash'\nimport { get } from '../../../tools/ajax'\n\nexport default {\n  data: () => {\n    return {\n      strategies: [],\n\n      candleSizeUnit: 'hours',\n      rawCandleSize: 1,\n\n      strategy: 'MACD',\n      historySize: 10,\n\n      rawStratParams: '',\n      rawStratParamsError: false,\n\n      emptyStrat: false,\n      stratParams: {}\n    };\n  },\n  created: function () {\n    get('strategies', (err, data) => {\n        this.strategies = data;\n\n        _.each(this.strategies, function(s) {\n          s.empty = s.params === '';\n        });\n\n        this.rawStratParams = _.find(this.strategies, { name: this.strategy }).params;\n        this.emptyStrat = _.find(this.strategies, { name: this.strategy }).empty;\n        this.emitConfig();\n    });\n  },\n  watch: {\n    strategy: function(strat) {\n      strat = _.find(this.strategies, { name: strat });\n      this.rawStratParams = strat.params;\n      this.emptyStrat = strat.empty;\n\n      this.emitConfig();\n    },\n    candleSize: function() { this.emitConfig() },\n    historySize: function() { this.emitConfig() },\n    rawStratParams: function() { this.emitConfig() }\n  },\n  computed: {\n    candleSize: function() {\n       if(this.candleSizeUnit === 'minutes')\n        return this.rawCandleSize;\n      else if(this.candleSizeUnit === 'hours')\n        return this.rawCandleSize * 60;\n      else if(this.candleSizeUnit === 'days')\n        return this.rawCandleSize * 60 * 24;\n    },\n    singularCandleSizeUnit: function() {\n      // hours -> hour\n      return this.candleSizeUnit.slice(0, -1);\n    },\n    config: function() {\n      let config = {\n        tradingAdvisor: {\n          enabled: true,\n          method: this.strategy,\n          candleSize: +this.candleSize,\n          historySize: +this.historySize\n        }\n      }\n\n      if(this.emptyStrat)\n        config[this.strategy] = {__empty: true}\n      else\n        config[this.strategy] = this.stratParams;\n\n      return config;\n    }\n  },\n  methods: {\n    humanizeDuration: (n) => window.humanizeDuration(n),\n    emitConfig: function() {\n      this.parseParams();\n      this.$emit('stratConfig', this.config);\n    },\n    parseParams: function() {\n      try {\n        this.stratParams = toml.parse(this.rawStratParams);\n        this.rawStratParamsError = false;\n      } catch(e) {\n        this.rawStratParamsError = e;\n        this.stratParams = {};\n      }\n    }\n  }\n}\n</script>\n<style>\n.align .custom-select select {\n  padding: 0.4em 1.2em .3em .8em;\n}\n\n.label-like {\n  display: block;\n  font-size: 0.9em;\n  color: #777;\n}\n\n.align {\n  padding-left: 1em;\n}\n</style>\n"],"sourceRoot":"src/components/global/configbuilder"}]}