{"remainingRequest":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/thread-loader/dist/cjs.js!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/babel-loader/lib/index.js!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/src/components/gekko/gekkoConfigBuilder.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/src/components/gekko/gekkoConfigBuilder.vue","mtime":1569604667000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/cache-loader/dist/cjs.js","mtime":1569708698000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/thread-loader/dist/cjs.js","mtime":1569708698000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/vue-loader/lib/index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.assign\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport marketPicker from '../global/configbuilder/marketpicker.vue';\nimport typePicker from '../global/configbuilder/typepicker.vue';\nimport stratPicker from '../global/configbuilder/stratpicker.vue';\nimport paperTrader from '../global/configbuilder/papertrader.vue';\nimport { get } from '../../tools/ajax';\nimport _ from 'lodash';\nexport default {\n  created: function created() {\n    var _this = this;\n\n    get('configPart/candleWriter', function (error, response) {\n      _this.candleWriter = toml.parse(response.part);\n    });\n    get('configPart/performanceAnalyzer', function (error, response) {\n      _this.performanceAnalyzer = toml.parse(response.part);\n      _this.performanceAnalyzer.enabled = true;\n    });\n  },\n  data: function data() {\n    return {\n      market: {},\n      range: {},\n      type: '',\n      strat: {},\n      paperTrader: {},\n      candleWriter: {},\n      performanceAnalyzer: {}\n    };\n  },\n  components: {\n    marketPicker: marketPicker,\n    typePicker: typePicker,\n    stratPicker: stratPicker,\n    paperTrader: paperTrader\n  },\n  computed: {\n    isTradebot: function isTradebot() {\n      return this.type === 'tradebot';\n    },\n    config: function config() {\n      var config = {};\n      Object.assign(config, this.market, this.strat, {\n        paperTrader: this.paperTrader\n      }, {\n        candleWriter: this.candleWriter\n      }, {\n        type: this.type\n      }, {\n        performanceAnalyzer: this.performanceAnalyzer\n      });\n\n      if (this.isTradebot) {\n        delete config.paperTrader;\n        config.trader = {\n          enabled: true\n        };\n      }\n\n      config.valid = this.validConfig(config);\n      return config;\n    }\n  },\n  methods: {\n    validConfig: function validConfig(config) {\n      if (config.type === 'market watcher') return true;\n      if (!config.tradingAdvisor) return false;\n      if (_.isNaN(config.tradingAdvisor.candleSize)) return false;else if (config.tradingAdvisor.candleSize == 0) return false;\n      var strat = config.tradingAdvisor.method;\n      if (_.isEmpty(config[strat])) return false;\n      return true;\n    },\n    updateMarketConfig: function updateMarketConfig(mc) {\n      this.market = mc;\n      this.emitConfig();\n    },\n    updateType: function updateType(type) {\n      this.type = type;\n      this.emitConfig();\n    },\n    updateStrat: function updateStrat(strat) {\n      this.strat = strat;\n      this.emitConfig();\n    },\n    updatePaperTrader: function updatePaperTrader(pt) {\n      this.paperTrader = pt;\n      this.paperTrader.enabled = true;\n      this.emitConfig();\n    },\n    emitConfig: function emitConfig() {\n      this.$emit('config', this.config);\n    }\n  }\n};",{"version":3,"sources":["gekkoConfigBuilder.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAiBA,OAAA,YAAA,MAAA,0CAAA;AACA,OAAA,UAAA,MAAA,wCAAA;AACA,OAAA,WAAA,MAAA,yCAAA;AACA,OAAA,WAAA,MAAA,yCAAA;AACA,SAAA,GAAA,QAAA,kBAAA;AACA,OAAA,CAAA,MAAA,QAAA;AAEA,eAAA;AAEA,WAAA,mBAAA;AAAA;;AACA,QAAA,yBAAA,EAAA,UAAA,KAAA,EAAA,QAAA,EAAA;AACA,YAAA,YAAA,GAAA,KAAA,KAAA,CAAA,SAAA,IAAA,CAAA;AACA,KAFA;AAGA,QAAA,gCAAA,EAAA,UAAA,KAAA,EAAA,QAAA,EAAA;AACA,YAAA,mBAAA,GAAA,KAAA,KAAA,CAAA,SAAA,IAAA,CAAA;AACA,YAAA,mBAAA,CAAA,OAAA,GAAA,IAAA;AACA,KAHA;AAIA,GAVA;AAWA,QAAA,gBAAA;AACA,WAAA;AACA,cAAA,EADA;AAEA,aAAA,EAFA;AAGA,YAAA,EAHA;AAIA,aAAA,EAJA;AAKA,mBAAA,EALA;AAMA,oBAAA,EANA;AAOA,2BAAA;AAPA,KAAA;AASA,GArBA;AAsBA,cAAA;AACA,8BADA;AAEA,0BAFA;AAGA,4BAHA;AAIA;AAJA,GAtBA;AA4BA,YAAA;AACA,gBAAA,sBAAA;AACA,aAAA,KAAA,IAAA,KAAA,UAAA;AACA,KAHA;AAIA,YAAA,kBAAA;AACA,UAAA,SAAA,EAAA;AACA,aAAA,MAAA,CACA,MADA,EAEA,KAAA,MAFA,EAGA,KAAA,KAHA,EAIA;AAAA,qBAAA,KAAA;AAAA,OAJA,EAKA;AAAA,sBAAA,KAAA;AAAA,OALA,EAMA;AAAA,cAAA,KAAA;AAAA,OANA,EAOA;AAAA,6BAAA,KAAA;AAAA,OAPA;;AAUA,UAAA,KAAA,UAAA,EAAA;AACA,eAAA,OAAA,WAAA;AACA,eAAA,MAAA,GAAA;AAAA,mBAAA;AAAA,SAAA;AACA;;AAEA,aAAA,KAAA,GAAA,KAAA,WAAA,CAAA,MAAA,CAAA;AAEA,aAAA,MAAA;AACA;AAxBA,GA5BA;AAsDA,WAAA;AACA,iBAAA,6BAAA;AACA,UAAA,OAAA,IAAA,KAAA,gBAAA,EACA,OAAA,IAAA;AAEA,UAAA,CAAA,OAAA,cAAA,EACA,OAAA,KAAA;AACA,UAAA,EAAA,KAAA,CAAA,OAAA,cAAA,CAAA,UAAA,CAAA,EACA,OAAA,KAAA,CADA,KAEA,IAAA,OAAA,cAAA,CAAA,UAAA,IAAA,CAAA,EACA,OAAA,KAAA;AAEA,UAAA,QAAA,OAAA,cAAA,CAAA,MAAA;AACA,UAAA,EAAA,OAAA,CAAA,OAAA,KAAA,CAAA,CAAA,EACA,OAAA,KAAA;AAEA,aAAA,IAAA;AACA,KAjBA;AAkBA,wBAAA,4BAAA,EAAA,EAAA;AACA,WAAA,MAAA,GAAA,EAAA;AACA,WAAA,UAAA;AACA,KArBA;AAsBA,gBAAA,oBAAA,IAAA,EAAA;AACA,WAAA,IAAA,GAAA,IAAA;AACA,WAAA,UAAA;AACA,KAzBA;AA0BA,iBAAA,qBAAA,KAAA,EAAA;AACA,WAAA,KAAA,GAAA,KAAA;AACA,WAAA,UAAA;AACA,KA7BA;AA8BA,uBAAA,2BAAA,EAAA,EAAA;AACA,WAAA,WAAA,GAAA,EAAA;AACA,WAAA,WAAA,CAAA,OAAA,GAAA,IAAA;AACA,WAAA,UAAA;AACA,KAlCA;AAoCA,gBAAA,sBAAA;AACA,WAAA,KAAA,CAAA,QAAA,EAAA,KAAA,MAAA;AACA;AAtCA;AAtDA,CAAA","sourcesContent":["<template lang='pug'>\n.grd.contain\n  .grd-row\n    .grd-row-col-3-6.mx1\n      h3 Market\n      market-picker(v-on:market='updateMarketConfig', :only-tradable='isTradebot')\n    .grd-row-col-3-6.mx1\n      type-picker(v-on:type='updateType')\n  template(v-if='type !== \"market watcher\"')\n    .hr\n    strat-picker.contain.my2(v-on:stratConfig='updateStrat')\n    .hr(v-if='type === \"paper trader\"')\n    paper-trader(v-on:settings='updatePaperTrader', v-if='type === \"paper trader\"')\n</template>\n\n<script>\n\nimport marketPicker from '../global/configbuilder/marketpicker.vue'\nimport typePicker from '../global/configbuilder/typepicker.vue'\nimport stratPicker from '../global/configbuilder/stratpicker.vue'\nimport paperTrader from '../global/configbuilder/papertrader.vue'\nimport { get } from '../../tools/ajax'\nimport _ from 'lodash'\n\nexport default {\n\n  created: function() {\n    get('configPart/candleWriter', (error, response) => {\n      this.candleWriter = toml.parse(response.part);\n    });\n    get('configPart/performanceAnalyzer', (error, response) => {\n      this.performanceAnalyzer = toml.parse(response.part);\n      this.performanceAnalyzer.enabled = true;\n    });\n  },\n  data: () => {\n    return {\n      market: {},\n      range: {},\n      type: '',\n      strat: {},\n      paperTrader: {},\n      candleWriter: {},\n      performanceAnalyzer: {}\n    }\n  },\n  components: {\n    marketPicker,\n    typePicker,\n    stratPicker,\n    paperTrader\n  },\n  computed: {\n    isTradebot: function() {\n      return this.type === 'tradebot';\n    },\n    config: function() {\n      let config = {};\n      Object.assign(\n        config,\n        this.market,\n        this.strat,\n        { paperTrader: this.paperTrader },\n        { candleWriter: this.candleWriter },\n        { type: this.type },\n        { performanceAnalyzer: this.performanceAnalyzer }\n      );\n\n      if(this.isTradebot) {\n        delete config.paperTrader;\n        config.trader = { enabled: true }\n      }\n\n      config.valid = this.validConfig(config);\n\n      return config;\n    }\n  },\n  methods: {\n    validConfig: config => {\n      if(config.type === 'market watcher')\n        return true;\n\n      if(!config.tradingAdvisor)\n        return false;\n      if(_.isNaN(config.tradingAdvisor.candleSize))\n        return false;\n      else if(config.tradingAdvisor.candleSize == 0)\n        return false;\n\n      let strat = config.tradingAdvisor.method;\n      if(_.isEmpty(config[ strat ]))\n        return false;\n\n      return true;\n    },\n    updateMarketConfig: function(mc) {\n      this.market = mc;\n      this.emitConfig();\n    },\n    updateType: function(type) {\n      this.type = type;\n      this.emitConfig();\n    },\n    updateStrat: function(strat) {\n      this.strat = strat;\n      this.emitConfig();\n    },\n    updatePaperTrader: function(pt) {\n      this.paperTrader = pt;\n      this.paperTrader.enabled = true;\n      this.emitConfig();\n    },\n\n    emitConfig: function() {\n      this.$emit('config', this.config); \n    }\n  }\n}\n</script>\n\n<style>\n</style>\n"],"sourceRoot":"src/components/gekko"}]}