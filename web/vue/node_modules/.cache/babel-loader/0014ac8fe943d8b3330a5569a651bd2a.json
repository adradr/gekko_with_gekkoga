{"remainingRequest":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/thread-loader/dist/cjs.js!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/babel-loader/lib/index.js!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/src/components/config/apiConfigBuilder.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/src/components/config/apiConfigBuilder.vue","mtime":1569604667000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/cache-loader/dist/cjs.js","mtime":1569708698000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/thread-loader/dist/cjs.js","mtime":1569708698000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/vue-loader/lib/index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport exchangePicker from '../global/configbuilder/exchangepicker.vue';\nimport _ from 'lodash';\nimport { post } from '../../tools/ajax';\nexport default {\n  data: function data() {\n    return {\n      exchange: false,\n      credentials: {}\n    };\n  },\n  components: {\n    exchangePicker: exchangePicker\n  },\n  computed: {\n    apiKeySets: function apiKeySets() {\n      return this.$store.state.apiKeys;\n    },\n    exchanges: function exchanges() {\n      return this.$store.state.exchanges;\n    },\n    requires: function requires() {\n      if (!this.exchanges) return [];\n      if (!this.exchange) return [];\n      return this.exchanges[this.exchange].requires;\n    },\n    config: function config() {\n      var config = {\n        exchange: this.exchange,\n        values: this.credentials\n      };\n      return config;\n    }\n  },\n  watch: {\n    credentials: function credentials() {\n      this.emitConfig();\n    }\n  },\n  methods: {\n    updateExchange: function updateExchange(exchange) {\n      this.credentials = {};\n      this.exchange = exchange;\n      this.emitConfig();\n    },\n    emitConfig: function emitConfig() {\n      this.$emit('config', this.config);\n    },\n    upload: function upload() {\n      var _this = this;\n\n      var exchange = this.config.exchange;\n      if (this.exchanges && this.apiKeySets.includes(exchange) && !confirm(\"You already have API keys for \".concat(exchange, \" defined, do you want to overwrite them?\"))) return;\n      post('addApiKey', this.config, function (error, response) {\n        if (error) return alert(error);\n        _this.credentials = {};\n      });\n    }\n  }\n};",{"version":3,"sources":["apiConfigBuilder.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA,OAAA,cAAA,MAAA,4CAAA;AACA,OAAA,CAAA,MAAA,QAAA;AACA,SAAA,IAAA,QAAA,kBAAA;AAEA,eAAA;AACA,QAAA,gBAAA;AACA,WAAA;AACA,gBAAA,KADA;AAEA,mBAAA;AAFA,KAAA;AAIA,GANA;AAOA,cAAA;AACA;AADA,GAPA;AAUA,YAAA;AACA,gBAAA,sBAAA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,OAAA;AACA,KAHA;AAIA,eAAA,qBAAA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,SAAA;AACA,KANA;AAOA,cAAA,oBAAA;AACA,UAAA,CAAA,KAAA,SAAA,EACA,OAAA,EAAA;AAEA,UAAA,CAAA,KAAA,QAAA,EACA,OAAA,EAAA;AAEA,aAAA,KAAA,SAAA,CAAA,KAAA,QAAA,EAAA,QAAA;AACA,KAfA;AAgBA,YAAA,kBAAA;AACA,UAAA,SAAA;AACA,kBAAA,KAAA,QADA;AAEA,gBAAA,KAAA;AAFA,OAAA;AAKA,aAAA,MAAA;AACA;AAvBA,GAVA;AAmCA,SAAA;AACA,iBAAA,uBAAA;AACA,WAAA,UAAA;AACA;AAHA,GAnCA;AAwCA,WAAA;AACA,oBAAA,wBAAA,QAAA,EAAA;AACA,WAAA,WAAA,GAAA,EAAA;AACA,WAAA,QAAA,GAAA,QAAA;AACA,WAAA,UAAA;AACA,KALA;AAMA,gBAAA,sBAAA;AACA,WAAA,KAAA,CAAA,QAAA,EAAA,KAAA,MAAA;AACA,KARA;AASA,YAAA,kBAAA;AAAA;;AAEA,UAAA,WAAA,KAAA,MAAA,CAAA,QAAA;AAEA,UACA,KAAA,SAAA,IACA,KAAA,UAAA,CAAA,QAAA,CAAA,QAAA,CADA,IAEA,CAAA,gDAAA,QAAA,8CAHA,EAKA;AAEA,WAAA,WAAA,EAAA,KAAA,MAAA,EAAA,UAAA,KAAA,EAAA,QAAA,EAAA;AACA,YAAA,KAAA,EACA,OAAA,MAAA,KAAA,CAAA;AAEA,cAAA,WAAA,GAAA,EAAA;AACA,OALA;AAMA;AA1BA;AAxCA,CAAA","sourcesContent":["<template lang='pug'>\n.grd.contain\n  h3 Add an API key\n  p Make sure that the API key has the permissions to create and cancel orders and view balances.\n  .grd-row\n    .grd-row-col-3-6.mx1\n      h3 Exchange\n      exchange-picker(v-on:exchange='updateExchange', only-tradable='true')\n    .grd-row-col-3-6.mx1\n      h3 Credentials\n      template(v-for='cred in requires')\n        label {{ cred }}\n        input(v-model='credentials[cred]')\n  .txt--center\n    a.w100--s.my1.btn--primary(href='#', v-on:click.prevent='upload') Add\n</template>\n\n<script>\n\nimport exchangePicker from '../global/configbuilder/exchangepicker.vue'\nimport _ from 'lodash'\nimport { post } from '../../tools/ajax';\n\nexport default {\n  data: () => {\n    return {\n      exchange: false,\n      credentials: {}\n    }\n  },\n  components: {\n    exchangePicker\n  },\n  computed: {\n    apiKeySets: function() {\n      return this.$store.state.apiKeys;\n    },\n    exchanges: function() {\n      return this.$store.state.exchanges;\n    },\n    requires: function() {\n      if(!this.exchanges)\n        return [];\n\n      if(!this.exchange)\n        return [];\n\n      return this.exchanges[this.exchange].requires;\n    },\n    config: function() {\n      let config = {\n        exchange: this.exchange,\n        values: this.credentials\n      };\n\n      return config;\n    }\n  },\n  watch: {\n    credentials: function() {\n      this.emitConfig();\n    }\n  },\n  methods: {\n    updateExchange: function(exchange) {\n      this.credentials = {};\n      this.exchange = exchange;\n      this.emitConfig();\n    },\n    emitConfig: function() {\n      this.$emit('config', this.config);\n    },\n    upload: function() {\n\n      let exchange = this.config.exchange;\n\n      if(\n        this.exchanges &&\n        this.apiKeySets.includes(exchange) &&\n        !confirm(`You already have API keys for ${exchange} defined, do you want to overwrite them?`)\n      )\n          return;\n\n      post('addApiKey', this.config, (error, response) => {\n        if(error)\n          return alert(error);\n\n        this.credentials = {};\n      });\n    }\n  }\n}\n</script>\n\n<style>\n</style>\n"],"sourceRoot":"src/components/config"}]}