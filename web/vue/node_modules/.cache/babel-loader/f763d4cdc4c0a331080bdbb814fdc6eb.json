{"remainingRequest":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/thread-loader/dist/cjs.js!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/babel-loader/lib/index.js!/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/src/components/global/ws.js","dependencies":[{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/src/components/global/ws.js","mtime":1569604667000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/cache-loader/dist/cjs.js","mtime":1569708698000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/thread-loader/dist/cjs.js","mtime":1569708698000},{"path":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue/node_modules/babel-loader/lib/index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import _ from 'lodash';\nimport Vue from 'vue';\nimport { wsPath } from '../../tools/api';\nimport initializeState from '../../store/init';\nvar socket = null;\nexport var bus = new Vue();\nbus.$on('gekko_update', function (data) {\n  return console.log(data);\n});\nbus.$on('import_update', function (data) {\n  return console.log(data);\n});\nbus.$on('import_error', function (data) {\n  alert('IMPORT ERROR: ' + data.error);\n});\nvar info = {\n  connected: false\n};\nexport var connect = function connect() {\n  socket = new ReconnectingWebSocket(wsPath, null, {\n    maxReconnectInterval: 4000\n  });\n  setTimeout(function () {\n    // in case we cannot connect\n    if (!info.connected) {\n      initializeState();\n      bus.$emit('WS_STATUS_CHANGE', info);\n    }\n  }, 500);\n\n  socket.onopen = function () {\n    if (info.connected) return;\n    info.connected = true;\n    bus.$emit('WS_STATUS_CHANGE', info);\n    initializeState();\n  };\n\n  socket.onclose = function () {\n    if (!info.connected) return;\n    info.connected = false;\n    bus.$emit('WS_STATUS_CHANGE', info);\n  };\n\n  socket.onerror = function () {\n    if (!info.connected) return;\n    info.connected = false;\n    bus.$emit('WS_STATUS_CHANGE', info);\n  };\n\n  socket.onmessage = function (message) {\n    var payload = JSON.parse(message.data); // console.log('ws message:', payload);\n\n    bus.$emit(payload.type, payload);\n  };\n};",{"version":3,"sources":["src/components/global/ws.js"],"names":["_","Vue","wsPath","initializeState","socket","bus","$on","console","log","data","alert","error","info","connected","connect","ReconnectingWebSocket","maxReconnectInterval","setTimeout","$emit","onopen","onclose","onerror","onmessage","message","payload","JSON","parse","type"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,GAAP,MAAgB,KAAhB;AAEA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAOC,eAAP,MAA4B,kBAA5B;AAEA,IAAIC,SAAS,IAAb;AAEA,OAAO,IAAMC,MAAM,IAAIJ,GAAJ,EAAZ;AAEPI,IAAIC,GAAJ,CAAQ,cAAR,EAAwB;AAAA,SAAQC,QAAQC,GAAR,CAAYC,IAAZ,CAAR;AAAA,CAAxB;AAEAJ,IAAIC,GAAJ,CAAQ,eAAR,EAAyB;AAAA,SAAQC,QAAQC,GAAR,CAAYC,IAAZ,CAAR;AAAA,CAAzB;AACAJ,IAAIC,GAAJ,CAAQ,cAAR,EAAwB,gBAAQ;AAC9BI,QAAM,mBAAmBD,KAAKE,KAA9B;AACD,CAFD;AAIA,IAAMC,OAAO;AACXC,aAAW;AADA,CAAb;AAIA,OAAO,IAAMC,UAAU,SAAVA,OAAU,GAAM;AAC3BV,WAAS,IAAIW,qBAAJ,CAA0Bb,MAA1B,EAAkC,IAAlC,EAAwC;AAAEc,0BAAsB;AAAxB,GAAxC,CAAT;AAEAC,aAAW,YAAM;AACf;AACA,QAAG,CAACL,KAAKC,SAAT,EAAoB;AAClBV;AACAE,UAAIa,KAAJ,CAAU,kBAAV,EAA8BN,IAA9B;AACD;AACF,GAND,EAMG,GANH;;AAQAR,SAAOe,MAAP,GAAgB,YAAM;AACpB,QAAGP,KAAKC,SAAR,EACE;AAEFD,SAAKC,SAAL,GAAiB,IAAjB;AACAR,QAAIa,KAAJ,CAAU,kBAAV,EAA8BN,IAA9B;AACAT;AACD,GAPD;;AAQAC,SAAOgB,OAAP,GAAiB,YAAM;AACrB,QAAG,CAACR,KAAKC,SAAT,EACE;AAEFD,SAAKC,SAAL,GAAiB,KAAjB;AACAR,QAAIa,KAAJ,CAAU,kBAAV,EAA8BN,IAA9B;AACD,GAND;;AAOAR,SAAOiB,OAAP,GAAiB,YAAM;AACrB,QAAG,CAACT,KAAKC,SAAT,EACE;AAEFD,SAAKC,SAAL,GAAiB,KAAjB;AACAR,QAAIa,KAAJ,CAAU,kBAAV,EAA8BN,IAA9B;AACD,GAND;;AAOAR,SAAOkB,SAAP,GAAmB,UAASC,OAAT,EAAkB;AACnC,QAAMC,UAAUC,KAAKC,KAAL,CAAWH,QAAQd,IAAnB,CAAhB,CADmC,CAEnC;;AACAJ,QAAIa,KAAJ,CAAUM,QAAQG,IAAlB,EAAwBH,OAAxB;AACD,GAJD;AAKD,CAtCM","sourceRoot":"/Users/adr/Library/Mobile Documents/com~apple~CloudDocs/gekko/web/vue","sourcesContent":["import _ from 'lodash'\nimport Vue from 'vue'\n\nimport { wsPath } from '../../tools/api'\nimport initializeState from '../../store/init'\n\nvar socket = null;\n\nexport const bus = new Vue();\n\nbus.$on('gekko_update', data => console.log(data))\n\nbus.$on('import_update', data => console.log(data))\nbus.$on('import_error', data => {\n  alert('IMPORT ERROR: ' + data.error);\n});\n\nconst info = {\n  connected: false\n}\n\nexport const connect = () => {\n  socket = new ReconnectingWebSocket(wsPath, null, { maxReconnectInterval: 4000 });\n\n  setTimeout(() => {\n    // in case we cannot connect\n    if(!info.connected) {\n      initializeState();\n      bus.$emit('WS_STATUS_CHANGE', info);\n    }\n  }, 500);\n\n  socket.onopen = () => {\n    if(info.connected)\n      return;\n\n    info.connected = true;\n    bus.$emit('WS_STATUS_CHANGE', info);\n    initializeState();\n  }\n  socket.onclose = () => {\n    if(!info.connected)\n      return;\n\n    info.connected = false;\n    bus.$emit('WS_STATUS_CHANGE', info);\n  }\n  socket.onerror = () => {\n    if(!info.connected)\n      return;\n\n    info.connected = false;\n    bus.$emit('WS_STATUS_CHANGE', info);\n  }\n  socket.onmessage = function(message) {\n    const payload = JSON.parse(message.data);\n    // console.log('ws message:', payload);\n    bus.$emit(payload.type, payload);\n  };\n}"]}]}